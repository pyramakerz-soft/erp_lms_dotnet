name: Sync .NET LMSERP with Hostinger

on:
  push:
    branches:
      - main  # Trigger on push to the main branch

  schedule:
    - cron: '0 6 * * *'  # Daily at 9 AM UTC

  workflow_dispatch:  # Allows manual trigger

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          submodules: false  # Disable submodule handling

      - name: Install SSH Client
        run: sudo apt-get update && sudo apt-get install -y sshpass

      - name: Sync Files via SSH and Deploy .NET Application
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        run: |
          set -e  # Stop on any error

          METRICS=$(sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -T -o StrictHostKeyChecking=no \
          -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
            cd domains/pyramakerz-artifacts.com/public_html/LMSERP/

            echo "Starting deployment at $(date)..."

            git stash || true
            git fetch origin main || exit 1
            git reset --hard origin/main || echo "Reset failed, trying pull..."
            git pull origin main || exit 1

            # Build and publish the .NET project
            dotnet clean || echo "Clean failed"
            dotnet restore || echo "Restore failed"
            dotnet build --configuration Release || exit 1
            dotnet publish --configuration Release --output ./publish || exit 1

            # Move published files to the correct location
            rsync -av --delete ./publish/ /var/www/html/LMSERP/ || exit 1

            # Restart the application (if running with systemd or similar)
            sudo systemctl restart kestrel-LMSERP.service || echo "Failed to restart Kestrel"

            # Capture system metrics
            CPU=$(top -bn1 | grep "Cpu(s)" | awk '{print $2 + $4}')
            MEM=$(free -m | awk 'NR==2{printf "%.2f", $3*100/$2 }')
            DISK=$(df -h / | awk '$NF=="/"{printf "%d", $5}')

            echo "CPU=$CPU"
            echo "MEM=$MEM"
            echo "DISK=$DISK"
          EOF
          )

          echo "Captured Metrics: $METRICS"

          CPU=$(echo "$METRICS" | grep "CPU=" | cut -d'=' -f2)
          MEM=$(echo "$METRICS" | grep "MEM=" | cut -d'=' -f2)
          DISK=$(echo "$METRICS" | grep "DISK=" | cut -d'=' -f2)

          echo "Parsed CPU=$CPU, MEM=$MEM, DISK=$DISK"

          if [ -z "$CPU" ] || [ -z "$MEM" ] || [ -z "$DISK" ]; then
            echo "Failed to capture valid metrics"
            exit 1
          fi

          echo "CPU=$CPU" >> $GITHUB_ENV
          echo "MEM=$MEM" >> $GITHUB_ENV
          echo "DISK=$DISK" >> $GITHUB_ENV

      - name: Send Slack Notification
        if: always()  # Run on both success and failure
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          CPU: ${{ env.CPU }}
          MEM: ${{ env.MEM }}
          DISK: ${{ env.DISK }}
        run: |
          STATUS=$(if [ $? -eq 0 ]; then echo '✅ Successful'; else echo '❌ Failed'; fi)
          COLOR=$(if [ $? -eq 0 ]; then echo 'good'; else echo 'danger'; fi)

          DEPLOYER="@${{ github.actor }}"
          COMMIT_MSG="${{ github.event.head_commit.message }}"
          COMMIT_HASH="${{ github.event.head_commit.id }}"

          curl -X POST -H 'Content-type: application/json' --data '{
            "blocks": [
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "*Health Check Report:* '"$STATUS"'"
                }
              },
              {
                "type": "divider"
              },
              {
                "type": "section",
                "fields": [
                  { "type": "mrkdwn", "text": "*Environment:* Production" },
                  { "type": "mrkdwn", "text": "*Status:* '"$STATUS"'" },
                  { "type": "mrkdwn", "text": "*CPU Usage (%):* '"$CPU"'" },
                  { "type": "mrkdwn", "text": "*Memory Usage (%):* '"$MEM"'" },
                  { "type": "mrkdwn", "text": "*Disk Usage (%):* '"$DISK"'" }
                ]
              },
              {
                "type": "divider"
              },
              {
                "type": "section",
                "fields": [
                  { "type": "mrkdwn", "text": "*Branch:* main" },
                  { "type": "mrkdwn", "text": "*User:* '"$DEPLOYER"'" },
                  { "type": "mrkdwn", "text": "*Commit:* '"${COMMIT_HASH:0:7}"'" },
                  { "type": "mrkdwn", "text": "*Commit Message: Automation | * '"$COMMIT_MSG"'"  |}
                ]
              },
              {
                "type": "context",
                "elements": [
                  {
                    "type": "mrkdwn",
                    "text": "Deployment completed on: '"$(date)"'"
                  }
                ]
              }
            ],
            "attachments": [
              {
                "color": "'"$COLOR"'"
              }
            ]
          }' $SLACK_WEBHOOK
