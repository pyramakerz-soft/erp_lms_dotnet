name: Sync .NET LMSERP with AWS

on:
  push:
    branches:
      - main

  schedule:
    - cron: '0 6 * * *'  # Daily at 9 AM UTC

  workflow_dispatch:  # Manual trigger

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Install Dependencies
        run: sudo apt-get update && sudo apt-get install -y sshpass

      - name: Adjust Private Key Permissions
        run: chmod 600 erp-lms-dotnet.pem

      - name: Deploy to AWS via SSH
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        run: |
          set -e  # Stop on error

          echo "Connecting to AWS instance..."
          ssh -i erp-lms-dotnet.pem -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ubuntu@3.80.91.121 << 'EOF'
            sudo -i
            cd /var/www/html/lmserp/erp_lms_dotnet/

            echo "Setting permissions..."
            
            sudo chown -R ubuntu:ubuntu .
            sudo chmod -R u+rwX .

            echo "Pulling latest changes from GitHub..."
            git stash || true
            git fetch origin main || exit 1
            git reset --hard origin/main || echo "Reset failed, trying pull..."
            git pull origin main || exit 1

            echo "Checking project structure..."
            cd LMS_CMS_Backend/LMS_CMS/

            echo "Building .NET backend project..."
            dotnet clean || echo "Clean failed"
            dotnet restore || exit 1
            dotnet build --configuration Release || exit 1

            echo "Stopping any running instances..."
            pkill -f "dotnet" || echo "No previous instance found."

            echo "Starting backend as a background service..."
            nohup dotnet run --urls "http://0.0.0.0:5094" > backend.log 2>&1 &

            echo "Checking if backend started correctly..."
            sleep 5
            curl --fail http://3.80.91.121:5094 || (echo "Backend failed to start!" && exit 1)

            cd ../../LMS_CMS_Frontend/

            echo "Building Angular frontend..."
            npm install
            npm run build --prod || exit 1

            echo "Syncing frontend to public directory..."
            rsync -av --delete dist/ /var/www/html/lmserp/frontend/ || exit 1

            echo "Deployment successful!"

            CPU=$(top -bn1 | grep "Cpu(s)" | awk '{print $2 + $4}')
            MEM=$(free -m | awk 'NR==2{printf "%.2f", $3*100/$2 }')
            DISK=$(df -h / | awk '$NF=="/"{printf "%d", $5}')

            echo "CPU=$CPU"
            echo "MEM=$MEM"
            echo "DISK=$DISK"
          EOF

      - name: Send Slack Notification
        if: always()  # Run on both success and failure
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        run: |
          CPU=${{ env.CPU }}
          MEM=${{ env.MEM }}
          DISK=${{ env.DISK }}
          STATUS="❌ Failed"
          COLOR="danger"
          if [ "${{ env.RESPONSE }}" == "200" ]; then
            STATUS="✅ Successful"
            COLOR="good"
          fi
          curl -X POST -H 'Content-type: application/json' --data '{
            "text": "Health Check Report: *'"$STATUS"'*",
            "attachments": [
              {
                "color": "'"$COLOR"'",
                "fields": [
                  { "title": "Environment", "value": "Production", "short": true },
                  { "title": "Status", "value": "'"$STATUS"'", "short": true },
                  { "title": "Admin Response", "value": "'"${{ env.RESPONSE }}"'", "short": true },
                  { "title": "CPU Usage (%)", "value": "'"$CPU"'", "short": true },
                  { "title": "Memory Usage (%)", "value": "'"$MEM"'", "short": true },
                  { "title": "Disk Usage (%)", "value": "'"$DISK"'", "short": true }
                ]
              }
            ]
          }' $SLACK_WEBHOOK
      - name: Send Monitoring Data to Slack
        if: success() || failure()
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        run: |
          STATUS=$(if [ $? -eq 0 ]; then echo '✅ Successful'; else echo '❌ Failed'; fi)
          COLOR=$(if [ $? -eq 0 ]; then echo 'good'; else echo 'danger'; fi)
          DEPLOYER="@${{ github.actor }}"
          CPU=${{ env.CPU }}
          MEM=${{ env.MEM }}
          DISK=${{ env.DISK }}
          RESPONSE=${{ env.RESPONSE }}
          COMMIT_MSG="${{ github.event.head_commit.message }}"
          COMMIT_HASH="${{ github.event.head_commit.id }}"
          curl -X POST -H "Content-type: application/json" --data '{
            "blocks": [
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "*Deployment Status:* '"$STATUS"'"
                }
              },
              {
                "type": "divider"
              },
              {
                "type": "section",
                "fields": [
                  { "type": "mrkdwn", "text": "*Branch:* main" },
                  { "type": "mrkdwn", "text": "*User:* '"$DEPLOYER"'" },
                  { "type": "mrkdwn", "text": "*Commit:* '"${COMMIT_HASH:0:7}"'" },
                  { "type": "mrkdwn", "text": "*Commit Message:* '"$COMMIT_MSG"'" }
                ]
              },
              {
                "type": "divider"
              },
              {
                "type": "context",
                "elements": [
                  {
                    "type": "mrkdwn",
                    "text": "Deployment completed on: '"$(date)"'"
                  }
                ]
              }
            ],
            "attachments": [
              {
                "color": "'"$COLOR"'"
              }
            ]
          }' $SLACK_WEBHOOK
